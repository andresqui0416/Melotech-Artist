// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(191)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Credentials auth
  passwordHash  String?
  role          UserRole  @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

enum UserRole {
  ADMIN
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique
  userId       String   @db.VarChar(191)
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id          String    @id @default(cuid()) @db.VarChar(191)
  name        String
  email       String    @unique
  phone       String?
  instagram   String?
  soundcloud  String?
  spotify     String?
  bio         String?   @db.Text
  createdAt   DateTime  @default(now())
  submissions Submission[]
}

model Submission {
  id           String         @id @default(cuid()) @db.VarChar(191)
  artistId     String         @db.VarChar(191)
  status       SubmissionStatus @default(PENDING)
  notesForTeam String?        @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tracks Track[]
  reviews Review[]

  @@index([status, createdAt])
}

enum SubmissionStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

model Track {
  id            String   @id @default(cuid()) @db.VarChar(191)
  submissionId  String   @db.VarChar(191)
  title         String
  genre         String?
  bpm           Int?
  musicalKey    String?
  description   String?  @db.Text
  // Storage
  originalUrl   String
  playbackUrl   String? // e.g., transcoded/streamable
  durationSec   Int?
  waveformJson  String?  @db.LongText

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Review {
  id            String   @id @default(cuid()) @db.VarChar(191)
  submissionId  String   @db.VarChar(191)
  reviewerId    String   @db.VarChar(191)
  score         Int
  internalNotes String?  @db.Text
  feedbackForArtist String? @db.Text
  createdAt     DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer   User       @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id        String   @id @default(cuid()) @db.VarChar(191)
  key       String   @unique // e.g., confirmation, approval, rejection
  subject   String
  htmlBody  String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
